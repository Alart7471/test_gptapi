import * as rxjs from 'rxjs';

interface OAuthToken {
    access_token: string;
    token_type: string;
    expires_in: number;
    scope: string;
}

interface PfmWealthAccount {
    product_name: string;
    provider_name: string;
    product_account_number: string;
    product_account_value: number;
    product_account_avail_value: number;
    base_product_account_value: number;
    base_product_account_avail_value: number;
    can_pay: boolean;
    can_trade: boolean;
    account_holding_url: string;
    transaction_history_url: string;
    my_portfolio_url: string;
    trade_url: string;
    payment_url: string;
    currency: string;
    is_fica_compliant: boolean;
    is_platform_account: boolean;
    platform_account_disclaimer: string;
    my_investments_additional_contribution_url: string;
    my_local_unit_trust_additional_contribution_url: string;
    account_type_description: string;
    hide_avail_value: boolean;
    account_provider: string;
    product_only: boolean;
    is_domestic: boolean;
}
interface PfmLiability {
    container_name: string;
    item_id: string;
    requires_mfa: boolean;
    is_outdated: boolean;
    refresh_required: boolean;
    item_account_id: string;
    bank_name: string;
    account_type: string;
    account_name: string;
    balance: string;
    ref_balance: string;
    available_balance: string;
    ref_available_balance: string;
    current_balance: string;
    ref_current_balance: string;
    ref_credit_balance: string;
    currency: string;
    last_update_dt: string;
    manual_auto: string;
    is_priority: boolean;
    is_prepop: boolean;
    exchange_rate: number;
    ref_benefit_amount: string;
    cash: string;
    is_internal_account: boolean;
}
interface Pfm {
    bank_accounts: PfmWealthAccount[];
    card_accounts: PfmWealthAccount[];
    loan_accounts: PfmWealthAccount[];
    investment_accounts: PfmWealthAccount[];
    insurance_accounts: PfmWealthAccount[];
    rewards_accounts: PfmWealthAccount[];
    assets: PfmWealthAccount[];
    liabilities: PfmLiability[];
    refresh_message: string[];
    last_checked_date: string;
    total_netwoth: string;
    total_assets: string;
    total_liabilities: string;
}

interface Transaction {
    transaction_date: string;
    transaction_date_order: string;
    post_date: string;
    post_date_order: string;
    description: string;
    amount: number;
    transaction_base_type: string;
    running_balance: number;
    transaction_status: string;
    posted_order: string;
    card_number: string;
    card_name: string;
    transaction_type: string;
    transaction_type_description: string;
    indicator: string;
    action_date: string;
    statement_order: string;
}

interface BeneficiaryPaymentDataSA {
    AccountId: number;
    BeneficiaryPaymentList: BeneficiaryToPay[];
}
interface BeneficiaryToPay {
    FasterPayment: boolean;
    BeneficiaryAccountId: string;
    BeneficiaryName: string;
    BenName: string;
    Amount: string;
    BeneficiaryCategoryId: string;
    MyReference: string;
    TheirReference: string;
}
interface BeneficiaryPaymentDataUK {
    PayeeId: number;
    SourceAccountId: string;
    PayerReference: string;
    Amount: string;
}

interface RewardsRedemptionInterface {
    "categoryId": string;
    "redemption": {
        "Quantity": string;
        "PartnerId": string;
        "AccountId": string;
        "InvestecUnitTrust"?: {
            "FundType": string;
            "PreferredContactNumber": string;
            "AccountNumber": string;
        };
        "Travel"?: {
            "BritishAirways": {
                "ClubCardMemberSurname": string;
                "AirlineMembershipNumber": string;
                "PreferredContactNumber": string;
            };
            "SaaVoyager": {
                "AirlineMembershipNumber": string;
                "PreferredContactNumber": string;
            };
        };
        "Leisure"?: {
            "RecipientName": string;
            "SAIdentityNumber": string;
            "CellNumber": string;
        };
        "PointsToCash"?: {
            "RandValue": string;
        };
    };
}

/**
 * Update card status: 1 - 'Active', 3 -'Soft Blocked'
 */
declare enum CardStatus {
    "activate" = 1,
    "block" = 3
}
interface BlockCard {
    AccountNumberHash: string;
    CardKeyHash: string;
    AccountNumber: string;
    Status: CardStatus;
}

interface IPortfolioEntity {
    portfolios?: Record<string, unknown>;
    contactData?: IContactDataEntity;
    zaSelectedProfile?: IZaProfileEntity;
    callResultMap?: {
        flag: string;
        result: boolean;
    }[];
    excludes?: {
        flag: string;
        result: boolean;
    }[];
    currency?: string;
    totals?: {
        PortfolioAssets: number;
        PortfolioLiabilities: number;
        PortfolioAvailableBalance: number;
    };
}
interface IContactDataEntity {
    privateBanker?: IPrivateBankerEntity;
    wealthManager?: IWealthManagerEntity;
    lifeAdviser?: ILifeAdvisorEntity;
}
interface IPrivateBankerEntity {
    BusinessCardIndicator: string;
    Consultant: string;
    CscName: string;
    CscNumber: string;
    DisplayName: string;
    Email: string;
    FaxNumber: string;
    GroupRef: string;
    MobileNumber: string;
    ParentRef: string;
    PhoneNumber: string;
}
interface IWealthManagerEntity {
    BusinessCardIndicator: boolean;
    CSCName: string;
    CSCNumber: string;
    Consultant: string;
    DisplayName: string;
    Email: string;
    FaxNumber: string;
    MobileNumber: string;
    PhoneNumber: string;
}
interface ILifeAdvisorEntity {
    BusinessCardIndicator: string;
    Consultant: string;
    DisplayName: string;
    Email: string;
    FaxNumber: string;
    GroupRef: number;
    PhoneNumber: string;
    CSCName: string;
    CSCNumber: string;
}
interface IZaProfileEntity {
    ProfileId?: string;
    ProfileName?: string;
    Default?: boolean;
    IsFicaCompliant?: boolean;
    VasEnabled?: boolean;
    VasKillSwitch?: boolean;
    RtcEnabled?: boolean;
    Accounts?: number;
    RewardsEnabled?: boolean;
    RewardsCanTransfer?: boolean;
    InternationalPaymentsInboundUrl?: string;
    NoticeAccountInboundUrl?: string;
    BenAuthActive?: boolean;
    BenAuthPending?: boolean;
    HasNoticeAccounts?: boolean;
    CanMakePayment?: boolean;
    IsProfileOwner?: boolean;
}

interface PostMessageResponse {
    errors: Array<any>;
    messages: Array<any>;
    result: any;
    success: boolean;
}

interface IPlatformInteractionsInterface {
    footer?: {
        showFooter?: boolean;
    };
    header?: {
        showHeader?: boolean;
        showBreadcrumb?: boolean;
        showBackButton?: boolean;
        showNotifications?: boolean;
        showMegaMenu?: boolean;
        showProfileSelector?: boolean;
    };
    headerApp?: {
        show?: boolean;
        height?: string;
        src?: string;
    };
    leftApp?: {
        show?: boolean;
        width?: string;
        src?: string;
    };
    modalApp?: {
        show?: boolean;
        src?: string;
    };
    leftNav?: {
        showLeftNav?: boolean;
        isOpen?: boolean;
    };
}

interface IAuthResponse {
    Client: {
        FirstName?: string;
        Surname?: string;
        Title?: string;
        EmailAddress?: string;
        MobileNumber?: string;
        Types: {
            PrivateClient?: boolean;
            Intermediary?: boolean;
            Corporate?: boolean;
            DefaultType: string;
            Youth?: boolean;
        };
    };
    ClientProfileFlags?: {
        UKExecutiveClientPlatform?: boolean;
    };
    ProfileList: Array<ISsoProfile>;
    WealthAndInvestmentCI?: boolean;
    WealthAndInvestmentUK?: boolean;
    WealthAndInvestmentGU?: boolean;
    WealthAndInvestmentZA?: boolean;
    WealthAndInvestmentClick?: boolean;
    WealthAndInvestment?: boolean;
    CanTrade?: boolean;
    ShareSchemes?: boolean;
    ResetPinRequired?: boolean;
    PrivateBank?: boolean;
    PrivateBankCI?: boolean;
    PrivateBankUK?: boolean;
    PrivateBankAU?: boolean;
    PrivateBankZA?: boolean;
    PrivateBankMU?: boolean;
    PersonalBanking?: boolean;
    Pfm?: boolean;
    PfmTargetMarket?: boolean;
    WealthManagement?: boolean;
    CanMasquerade?: boolean;
    IsMasqueradedAsClient?: boolean;
    ShowSSOLoginProfilePref?: boolean;
    AssetManagementUTZA?: boolean;
    AssetManagementIMSZA?: boolean;
    CanApply?: boolean;
    Briefcase?: boolean;
    BriefcaseTargetMarket?: boolean;
    BusinessBankingZa?: boolean;
    UserType?: string;
    DeviceRegistered?: boolean;
    IntermediaryAppActivated?: boolean;
    PrivateClientAppActivated?: boolean;
    UkAppActivated?: boolean;
    YouthAppActivated?: boolean;
    MaxSession?: string;
    SecondFactorPreference?: Array<string>;
    MyLegacy?: boolean;
    MyLegacyTargetMarket?: boolean;
    QuickLinksDisabled?: boolean;
    LifeTargetMarket?: boolean;
    Life?: boolean;
    Chat?: boolean;
    Misc?: {
        Zeta?: string;
    };
    LastLogin?: string;
    HIPI?: string;
    ProfileMaxSession?: string;
    PasswordResetJourneyAllowed?: boolean;
    HasQa?: boolean;
    RedirectExternalUrl?: string;
    RedirectInternalUrl?: string;
    HasQuickPass?: boolean;
    SecurityDetailsRequired?: boolean;
    Securities?: boolean;
    IsNewUser?: boolean;
    ShowQuickPass?: boolean;
    ShowWelcomeScreen?: boolean;
    IntermediaryBanking?: boolean;
    CorporateAndInvestmentBankingUK?: boolean;
    CibUkIntermediaryBanking?: boolean;
    HasCapabilities?: boolean;
}
interface ISsoProfile {
    KeyName: string;
    ProfileName: string;
    IsActive: boolean;
    IsDefault: boolean;
    ActiveUrl: string;
    ApiPortfolioUrl: string;
    NotActiveUrl: string;
    NoRightsUrl: string;
    MinSessionType: string;
    LoginPrefEnabled: string;
    ExcludeFromProfileList: boolean;
    ExludeFromProfileListIntermediary: boolean;
    ExternalRedirect: boolean;
    InternalRedirect: boolean;
    IsBusinessProfile: boolean;
    IsIntermediaryProfile: boolean;
}

interface IMenuConfig {
    mainMenu: IMenuItem[];
    mainMenuWithoutChildren: IMenuItem[];
    callResultMap: Array<ICallResultMapModel>;
    hasError: boolean;
    currentMenuRegion?: string;
}
interface ICallResultMapModel {
    url: string;
    result: boolean;
    region: string;
}
interface IMenuItem {
    Id: number;
    PositionRank?: number;
    Name: string;
    LongDescription?: string;
    ExclusiveHide?: boolean;
    AbsoluteUrl: string;
    New?: boolean;
    SearchKeys?: string;
    Children: Array<IMenuItem>;
}

interface IFeatures {
    alwaysTrue: boolean;
    PBSA_PROG_CARD?: boolean;
    OAUTH_EXT_CONN?: boolean;
}

interface IUserSetting {
    KeyId: number;
    RootKeyId: number;
    KeyName: string;
    Value: string;
    Value2: any;
    DisplayName: string;
    Sequence: number;
}

interface IUserAppStateEntity {
    AuthResponse?: {
        authRes: IAuthResponse | undefined;
    };
    Menu?: {
        menuConfig: IMenuConfig | undefined;
    };
    userFeatures?: {
        features: IFeatures | undefined;
    };
    userSettings?: {
        settings: IUserSetting[] | undefined;
    };
    availableUserSettings?: {
        availableSettings: IUserSetting[] | undefined;
    };
    Portfolio?: {
        data: IPortfolioEntity | undefined;
    };
    ZaProfiles?: {
        data: IZaProfileEntity[] | undefined;
    };
    selectedProfile?: {
        profile: IZaProfileEntity | undefined;
    };
    PlatformInteractions?: {
        data: IPlatformInteractionsInterface;
    };
}

declare const giga: {
    ai: {
        gigaChat: {
            open(): void;
            close(): void;
        };
        context: {
            add(context: any): Promise<unknown>;
        };
        message: {
            add(message: any): Promise<unknown>;
        };
    };
    platform: {
        init(): Promise<unknown>;
        initSession(): void;
        initPreLoginSession(sessionTime?: number | undefined, functionOnLogout?: any): void;
        getPlatformToken(): Promise<unknown>;
        renewSession(): void;
        isWebOrMobile(): Promise<unknown>;
        previousPageUrl(): Promise<unknown>;
        preFetchData(authRes?: any): void;
        reset(): void;
        setBrowserTile(title: string): void;
        navigateUrl(url: string | IMenuItem, target?: string | undefined): void;
        navigateAppId(id: string, target?: string | undefined): void;
        printDocument(data: {
            body: string | Blob | MediaSource;
            filename: string;
        }): void;
        updateUrl(url: string): void;
        loggedInSuccessfully(authRes: any): void;
        updateContext(state: IUserAppStateEntity): void;
        determineJourneyAfterLogin(): void;
        updateMenuRegion(region: string): void;
        interactions: {
            update(interactions: IPlatformInteractionsInterface): Promise<boolean>;
        };
        trackAdobeAnalytics(event: string, action: string): void;
        logout(): void;
    };
    mobile: {
        wallet: {
            open(): Promise<PostMessageResponse>;
        };
    };
    data: {
        getAllUserContext(): Promise<PostMessageResponse>;
        getUserUID(): Promise<PostMessageResponse>;
        getClientBasicDetails(): Promise<PostMessageResponse>;
        getPersonalisationOffers(id: string, template: string, data: any[]): void;
        getClientTypes(): Promise<PostMessageResponse>;
        getSelectedProfile(): rxjs.Observable<{
            errors: any[];
            messages: any[];
            result: IZaProfileEntity;
            success: boolean;
        }>;
        portfolio: {
            getState(): Promise<PostMessageResponse>;
            excludeFromTotal(payload?: {
                flag: string;
                result: boolean;
            }[] | undefined): Promise<unknown>;
            getAllPortfolios(currency: string, selectedProfile: any): rxjs.Observable<{
                errors: any[];
                messages: any[];
                result: IPortfolioEntity;
                success: boolean;
            }>;
            getPrivateBankZAPortfolio(currency: string, selectedProfile: any): Promise<PostMessageResponse>;
            getPrivateBankUKPortfolio(currency: string): Promise<PostMessageResponse>;
            getPrivateBankUKMortgagesPortfolio(currency: string): Promise<PostMessageResponse>;
            getPrivateBankCIPortfolio(currency: string): Promise<PostMessageResponse>;
            getPrivateBankMUPortfolio(currency: string): Promise<PostMessageResponse>;
            getWealthAndInvestmentZAPortfolio(currency: string): Promise<PostMessageResponse>;
            getWealthAndInvestmentUKPortfolio(currency: string): Promise<PostMessageResponse>;
            getWealthAndInvestmentGUPortfolio(currency: string): Promise<PostMessageResponse>;
            getWealthAndInvestmentClickPortfolio(currency: string): Promise<PostMessageResponse>;
            getWealthAndInvestmentCIPortfolio(currency: string): Promise<PostMessageResponse>;
            getAllNonInvestecAccounts(currency: string): Promise<PostMessageResponse>;
        };
        lookups: {
            bank: {
                sa: {
                    list(): Promise<PostMessageResponse>;
                };
            };
            client: {
                sa: {
                    list(): Promise<PostMessageResponse>;
                };
            };
        };
    };
    api: {
        privateClient: {
            pbsa: {
                transactions: {
                    get(transactionData: {
                        accountId: string;
                        dateFrom: string;
                        dateTo: string;
                    }): Promise<PostMessageResponse>;
                };
                client: {
                    get(): Promise<PostMessageResponse>;
                };
                accounts: {
                    list(): Promise<PostMessageResponse>;
                };
                card: {
                    list(account_number: number): Promise<PostMessageResponse>;
                    block(cardData: BlockCard): Promise<PostMessageResponse>;
                    getFullCardDetail(cardData: any): Promise<PostMessageResponse>;
                };
                rates: {
                    get(): Promise<PostMessageResponse>;
                };
                rewards: {
                    getLanding(accountNumberForRequests: string): Promise<any>;
                    getPartners(accountNumberForRequests: string): Promise<any>;
                    getPartnerCategories(): Promise<any>;
                    redemption(data: RewardsRedemptionInterface): Promise<any>;
                    transfer(data: {
                        fromAccount: string;
                        toAccount: string;
                        transferPoints: number;
                    }): Promise<any>;
                    getUnitTrustCategories(): Promise<any>;
                    getUnitTrusts(): Promise<any>;
                    getCalculatorSolutions(accountNumberForRequests: string): Promise<any>;
                    getTransactionTypes(): Promise<any>;
                    getTransactions(accountNumberForRequests: string, transactionTypeId: string): Promise<any>;
                };
                beneficiaries: {
                    list(): Promise<PostMessageResponse>;
                };
                payments: {
                    beneficiary(paymentData: BeneficiaryPaymentDataSA): Promise<PostMessageResponse>;
                };
            };
            pbuk: {
                client: {
                    get(): Promise<PostMessageResponse>;
                };
                transactions: {
                    list(accountId: string, startDate: string, endDate: string): Promise<PostMessageResponse>;
                };
                accounts: {
                    list(): Promise<PostMessageResponse>;
                };
                card: {
                    list(account_number: number): Promise<PostMessageResponse>;
                };
                beneficiaries: {
                    list(): Promise<PostMessageResponse>;
                    create(): Promise<PostMessageResponse>;
                };
                payments: {
                    beneficiary(paymentData: BeneficiaryPaymentDataUK): Promise<PostMessageResponse>;
                };
            };
            wisa: {
                transactions: {
                    list(accounts: {
                        number: string;
                        type: string;
                    }[], startDate: string, endDate: string, instrumentCode: string, categoryCodes: string[], isAllAccounts: boolean): Promise<Transaction[]>;
                };
                accounts: {
                    list(): Promise<PostMessageResponse>;
                };
                holdings: {
                    list(accounts: any[], referenceCurrencyCode: string, referenceDate: string): Promise<PostMessageResponse>;
                };
                market_data: {
                    indices: {
                        international: {
                            get(): Promise<PostMessageResponse>;
                            history(ID: string, FromDate: string, ToDate: string): Promise<PostMessageResponse>;
                        };
                        local: {
                            get(): Promise<PostMessageResponse>;
                            history(ID: string, FromDate: string, ToDate: string): Promise<PostMessageResponse>;
                        };
                    };
                    currency: {
                        get(): Promise<PostMessageResponse>;
                        history(ID: string, FromDate: string, ToDate: string): Promise<PostMessageResponse>;
                    };
                    commodity: {
                        get(): Promise<PostMessageResponse>;
                        history(ID: string, FromDate: string, ToDate: string): Promise<PostMessageResponse>;
                    };
                    dividends: {
                        get(): Promise<PostMessageResponse>;
                    };
                };
            };
            wiuk: {
                transactions: {
                    list(startDate: string, endDate: string, referenceCurrencyCode: string, statementType: string, account: {
                        Number: string;
                        Type: string;
                    }): Promise<PostMessageResponse>;
                };
                accounts: {
                    list(referenceDate: string, referenceCurrencyCode: string): Promise<PostMessageResponse>;
                };
                holdings: {
                    list(referenceDate: string, referenceCurrencyCode: string, account: {
                        Number: string;
                        Type: string;
                    }): Promise<PostMessageResponse>;
                };
                asset_allocation: {
                    get(referenceDate: string, referenceCurrencyCode: string, account: {
                        Number: string;
                        Type: string;
                    }): Promise<PostMessageResponse>;
                };
            };
            pfm: {
                accounts: {
                    list: {
                        all(): Promise<Pfm>;
                        nonInvestec(): Promise<PostMessageResponse>;
                    };
                    add: {};
                    refresh: {
                        all(): Promise<PostMessageResponse>;
                        single(accountId: string): Promise<PostMessageResponse>;
                    };
                    remove(accountId: string): Promise<PostMessageResponse>;
                    edit: {
                        fastLinkAccount(accountId: string): Promise<PostMessageResponse>;
                    };
                };
            };
            programmable_banking: {
                oauth: {
                    get(): Promise<OAuthToken>;
                };
                card: {
                    get(accountNumber: number): Promise<PostMessageResponse>;
                    toggle(accountNumber: number, cardKey: string): Promise<PostMessageResponse>;
                    logs(accountNumber: number, cardKey: string): Promise<PostMessageResponse>;
                };
                code: {
                    get(accountNumber: number, cardKey: string): Promise<PostMessageResponse>;
                    getPublished(accountNumber: number, cardKey: string): Promise<PostMessageResponse>;
                    save(accountNumber: number, cardKey: string, code: string): Promise<PostMessageResponse>;
                    publish: (accountNumber: number, cardKey: string, code: string, codeId: string) => Promise<PostMessageResponse>;
                };
                env: {
                    get(accountNumber: number, cardKey: string): Promise<PostMessageResponse>;
                    save(accountNumber: number, cardKey: string, variables: string): Promise<PostMessageResponse>;
                };
            };
        };
        intermediaryClient: {};
        businessBankingClient: {};
    };
};

export { giga };
